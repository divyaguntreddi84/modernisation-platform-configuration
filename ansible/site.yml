# Generic site.yml that deploys the appropriate set of roles for each
# host.
#
# Define a "roles_list" variable for each host containing the roles
# to run against that host.  Since the same roles typically
# run on the same component, and we are using dynamic inventory with
# tagging, define the "roles_list" variable in group_vars.
#
# For example, for a erpOnPrem database, define a roles_list variable in
#
# group_vars/server_type_db_audit
# ---
# roles_list:
#  - time
#  - hugepages
#  - oracle
#
# Example usage:
#
#   # Run all relevant roles against all hosts in check mode
#   ansible-playbook site.yml --check
#
#   # Run a subset of roles
#   ansible-playbook site.yml -e role=time,hugepages
#
#   # Limit the hosts (2 ways of doing this)
#   ansible-playbook site.yml --limit db-erponprem
#   ansible-playbook site.yml -e target=localhost
#
#   # Force a role to be applied even if not defined in roles_list
#   ansible-playbook site.yml -e force_role=time
#
#   # Run all tasks with ec2provision tag
#   ansible-playbook site.yml --tags ec2provision
- hosts: all
  tasks:
    - name: Set roles_defined fact
      set_fact:
        roles_defined: "{{ roles_list | default([]) }}"
      tags: always

    - name: Set roles_to_run fact
      set_fact:
        roles_to_run: >
          {% if force_role is defined %}
          {{ force_role.split(",") | map("trim") | list }}
          {% elif role is not defined or role == "all" %}
          {{ roles_defined | list }}
          {% elif role is defined and not role == "" %}
          {{ role.split(",") | map("trim") | intersect(roles_defined) | list }}
          {% else %}
          []
          {% endif %}
      tags: always

    - name: Execute roles
      include_role:
        name: "{{ role_to_run }}"
      with_items: "{{ roles_to_run }}"
      loop_control:
        loop_var: role_to_run
      tags: always

